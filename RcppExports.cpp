// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP ngcart_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// read_in
int read_in(NumericMatrix x);
RcppExport SEXP ngcart_read_in(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(read_in(x));
    return rcpp_result_gen;
END_RCPP
}
// gini_index
float gini_index(NumericVector y, NumericVector g);
RcppExport SEXP ngcart_gini_index(SEXP ySEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(gini_index(y, g));
    return rcpp_result_gen;
END_RCPP
}
// test_split
NumericVector test_split(double value, NumericVector feature);
RcppExport SEXP ngcart_test_split(SEXP valueSEXP, SEXP featureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type feature(featureSEXP);
    rcpp_result_gen = Rcpp::wrap(test_split(value, feature));
    return rcpp_result_gen;
END_RCPP
}
// get_split
List get_split(NumericMatrix m);
RcppExport SEXP ngcart_get_split(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(get_split(m));
    return rcpp_result_gen;
END_RCPP
}
// to_terminal
NumericVector to_terminal(NumericMatrix m);
RcppExport SEXP ngcart_to_terminal(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(to_terminal(m));
    return rcpp_result_gen;
END_RCPP
}
// split
void split(List node, int max_depth, int min_size, int depth, NumericMatrix data);
RcppExport SEXP ngcart_split(SEXP nodeSEXP, SEXP max_depthSEXP, SEXP min_sizeSEXP, SEXP depthSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    split(node, max_depth, min_size, depth, data);
    return R_NilValue;
END_RCPP
}
// build_tree
List build_tree(NumericMatrix train, int max_depth, int min_size);
RcppExport SEXP ngcart_build_tree(SEXP trainSEXP, SEXP max_depthSEXP, SEXP min_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type train(trainSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type min_size(min_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(build_tree(train, max_depth, min_size));
    return rcpp_result_gen;
END_RCPP
}
// predict
int predict(List node, NumericVector row);
RcppExport SEXP ngcart_predict(SEXP nodeSEXP, SEXP rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type row(rowSEXP);
    rcpp_result_gen = Rcpp::wrap(predict(node, row));
    return rcpp_result_gen;
END_RCPP
}
